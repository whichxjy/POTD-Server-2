/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef potd_TYPES_H
#define potd_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class Poem;

typedef struct _Poem__isset {
  _Poem__isset() : id(false), content(false) {}
  bool id :1;
  bool content :1;
} _Poem__isset;

class Poem : public virtual ::apache::thrift::TBase {
 public:

  Poem(const Poem&);
  Poem& operator=(const Poem&);
  Poem() : id(0), content() {
  }
  Poem(int32_t id, const std::string& content)
         : id(id), content(content) {
  }

  virtual ~Poem() noexcept;
  int32_t id;
  std::string content;

  _Poem__isset __isset;

  void __set_id(const int32_t val);

  void __set_content(const std::string& val);

  bool operator == (const Poem & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const Poem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Poem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Poem &a, Poem &b);

std::ostream& operator<<(std::ostream& out, const Poem& obj);



#endif
